const fs = require('fs');
const path = require('path');
const { Command } = require('commander');

function myParseInt(value) {
  return parseInt(value);
}

/* –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä /home/roman/–î–æ–∫—É–º–µ–Ω—Ç—ã/Git/Homework/ */
/* –ì–ª—É–±–∏–Ω–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è, —á–µ—Ä–µ–∑ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ --depth –∏–ª–∏ -d */

const program = new Command();
program.version('1.0.0').option('-d, --depth <depth>', '–≥–ª—É–±–∏–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞', myParseInt, 3);
program.parse(process.argv);

if (!program.args[0]) {
  return console.error('ü§Øü§Øü§Ø', '\x1b[31m', '–ù–µ —É–∫–∞–∑–∞–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç "–ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"');
}

const currentPath = path.resolve(program.args[0]);

function IterateTree(pathTree, number) {
  let iterate = number;
  fs.readdirSync(pathTree).forEach((elem) => {
    fs.stat(path.resolve(pathTree, elem), (error, stats) => {
      if (stats.isFile()) {
        console.log('-'.repeat(iterate), elem);
      }
      if (stats.isDirectory() && iterate <= program.depth) {
        console.log('-'.repeat(iterate), '/', elem);
        iterate = iterate + 1;
        const localPath = path.resolve(pathTree, elem);
        IterateTree(localPath, iterate);
      } else if (iterate > program.depth) {
        console.log('-'.repeat(iterate), '/', elem);
      }
    });
  });
}

IterateTree(currentPath, 0);
