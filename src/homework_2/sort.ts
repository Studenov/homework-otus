import fs from 'fs';
import { PATH_TO_CHUNK_FILE, PATH_TO_END_FILE, LENGHT_NUMBER_AND_SPACE } from './constants';
import { CreateChunk } from './createChunk';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—ã—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å —É–¥–∞–ª—è–µ–º –µ–≥–æ
if (fs.existsSync(PATH_TO_END_FILE)) {
  fs.unlinkSync(PATH_TO_END_FILE);
}

// –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª
fs.appendFileSync(PATH_TO_END_FILE, '', { encoding: 'utf-8' });
// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
const write = fs.createWriteStream(PATH_TO_END_FILE, { encoding: 'utf-8' });

// –ú–∞—Å—Å–∏–≤ —Å —á–∏—Å–ª–∞–º–∏ –∏–∑ —á–∞–Ω–∫–æ–≤
const values: Array<number> = [];
// –ú–∞—Å—Å–∏–≤ —Å–æ —Å—Ç—Ä–∏–º–∞–º–∏ —á–∞–Ω–∫–æ–≤
const streams: Array<fs.ReadStream> = [];

write.on('finish', () => {
  console.log('–§–∞–π–ª result.txt —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
});

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–ø–∏—Å–∏ —á–∏—Å–ª–∞ –≤ —Ñ–∞–π–ª
function WriteNumberToFile() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ —Å—Ç—Ä–∏–º—ã –≤ –ø–∞—É–∑–µ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–µ–Ω—ã
  if (streams.every((elem) => elem.destroyed || elem.isPaused())) {
    const min = Math.min(...values);
    const index = values.findIndex((e) => e === min);
    if (values[index] === Infinity) {
      write.end();
    } else {
      write.write(`${values[index]} `);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—Ç —Å—Ç—Ä–∏–º –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ —á–∏—Å–ª–æ
    streams[index].resume();
  }
}

function StreamCallback(path: string, streamIndex: number, reject: (error: string) => void) {
  // –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
  const stream = fs.createReadStream(PATH_TO_CHUNK_FILE + '/' + path, {
    highWaterMark: LENGHT_NUMBER_AND_SPACE,
    encoding: 'utf-8',
  });

  // –ó–∞–∫–∏–¥—ã–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∏–º–æ–≤ —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–º
  streams[streamIndex] = stream;

  stream.on('data', (chunk: string) => {
    // –ó–∞–∫–∏–¥—ã–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π, —á–∏—Å–ª–æ –∏–∑ —á–∞–Ω–∫–∞
    values[streamIndex] = Number(chunk.trim());
    stream.pause();
  });

  stream.on('pause', WriteNumberToFile);

  stream.on('close', WriteNumberToFile);

  stream.on('end', () => {
    // –ï—Å–ª–∏ —á–∞–Ω–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—á–∏—Ç–∞–Ω, –∑–∞–∫–∏–¥—ã–≤–∞–µ–º —Ç—É–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ Infinity
    values[streamIndex] = Infinity;
    stream.destroy();
  });

  stream.on('error', () => {
    reject(`–£–ø–∞–ª —Å—Ç—Ä–∏–º: ${streamIndex}`);
  });
}

function PromiseResult(resolve: () => void, reject: (error: string) => void): void {
  // –ò—â–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —á–∞–Ω–∫–∞–º–∏
  const files = fs.readdirSync(PATH_TO_CHUNK_FILE, { encoding: 'utf-8' });
  if (files.length === 0) {
    reject('–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç —á–∞–Ω–∫–æ–≤!');
  }

  files.forEach((file, streamIndex) => StreamCallback(file, streamIndex, reject));

  resolve();
}

function Result() {
  const promise = new Promise<void>(PromiseResult);
  return promise;
}

const chunks = CreateChunk();

Promise.all([chunks])
  .then(() => Result())
  .catch((error) => {
    if (typeof error === 'string') {
      return console.error('ü§Øü§Øü§Ø', '\x1b[31m', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞!', error);
    }
    return console.error('ü§Øü§Øü§Ø', '\x1b[31m', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞!', error?.message || '');
  });
